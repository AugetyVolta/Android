package com.example.success.generatedDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.success.entity.Room;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROOM".
*/
public class RoomDao extends AbstractDao<Room, Long> {

    public static final String TABLENAME = "ROOM";

    /**
     * Properties of entity Room.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MaxUserNumber = new Property(1, int.class, "maxUserNumber", false, "MAX_USER_NUMBER");
        public final static Property RoomName = new Property(2, String.class, "roomName", false, "ROOM_NAME");
        public final static Property SportType = new Property(3, String.class, "sportType", false, "SPORT_TYPE");
        public final static Property RoomDescribe = new Property(4, String.class, "roomDescribe", false, "ROOM_DESCRIBE");
        public final static Property Contact = new Property(5, String.class, "contact", false, "CONTACT");
        public final static Property StartTime = new Property(6, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(7, String.class, "endTime", false, "END_TIME");
    }

    private DaoSession daoSession;


    public RoomDao(DaoConfig config) {
        super(config);
    }
    
    public RoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROOM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAX_USER_NUMBER\" INTEGER NOT NULL ," + // 1: maxUserNumber
                "\"ROOM_NAME\" TEXT," + // 2: roomName
                "\"SPORT_TYPE\" TEXT," + // 3: sportType
                "\"ROOM_DESCRIBE\" TEXT," + // 4: roomDescribe
                "\"CONTACT\" TEXT," + // 5: contact
                "\"START_TIME\" TEXT," + // 6: startTime
                "\"END_TIME\" TEXT);"); // 7: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMaxUserNumber());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(3, roomName);
        }
 
        String sportType = entity.getSportType();
        if (sportType != null) {
            stmt.bindString(4, sportType);
        }
 
        String roomDescribe = entity.getRoomDescribe();
        if (roomDescribe != null) {
            stmt.bindString(5, roomDescribe);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(6, contact);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(7, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMaxUserNumber());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(3, roomName);
        }
 
        String sportType = entity.getSportType();
        if (sportType != null) {
            stmt.bindString(4, sportType);
        }
 
        String roomDescribe = entity.getRoomDescribe();
        if (roomDescribe != null) {
            stmt.bindString(5, roomDescribe);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(6, contact);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(7, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
    }

    @Override
    protected final void attachEntity(Room entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Room readEntity(Cursor cursor, int offset) {
        Room entity = new Room( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // maxUserNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roomName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sportType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roomDescribe
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contact
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Room entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMaxUserNumber(cursor.getInt(offset + 1));
        entity.setRoomName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSportType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoomDescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Room entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Room entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Room entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
