package com.example.success.generatedDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.success.entity.SportRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORT_RECORD".
*/
public class SportRecordDao extends AbstractDao<SportRecord, Long> {

    public static final String TABLENAME = "SPORT_RECORD";

    /**
     * Properties of entity SportRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property SportName = new Property(2, String.class, "sportName", false, "SPORT_NAME");
        public final static Property Duration = new Property(3, String.class, "duration", false, "DURATION");
        public final static Property SportLocation = new Property(4, String.class, "sportLocation", false, "SPORT_LOCATION");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property ImageBit1 = new Property(6, byte[].class, "imageBit1", false, "IMAGE_BIT1");
        public final static Property ImageBit2 = new Property(7, byte[].class, "imageBit2", false, "IMAGE_BIT2");
    }

    private Query<SportRecord> user_SportRecordsQuery;

    public SportRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SportRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"SPORT_NAME\" TEXT," + // 2: sportName
                "\"DURATION\" TEXT," + // 3: duration
                "\"SPORT_LOCATION\" TEXT," + // 4: sportLocation
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"IMAGE_BIT1\" BLOB," + // 6: imageBit1
                "\"IMAGE_BIT2\" BLOB);"); // 7: imageBit2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SportRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String sportName = entity.getSportName();
        if (sportName != null) {
            stmt.bindString(3, sportName);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
 
        String sportLocation = entity.getSportLocation();
        if (sportLocation != null) {
            stmt.bindString(5, sportLocation);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        byte[] imageBit1 = entity.getImageBit1();
        if (imageBit1 != null) {
            stmt.bindBlob(7, imageBit1);
        }
 
        byte[] imageBit2 = entity.getImageBit2();
        if (imageBit2 != null) {
            stmt.bindBlob(8, imageBit2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SportRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String sportName = entity.getSportName();
        if (sportName != null) {
            stmt.bindString(3, sportName);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
 
        String sportLocation = entity.getSportLocation();
        if (sportLocation != null) {
            stmt.bindString(5, sportLocation);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        byte[] imageBit1 = entity.getImageBit1();
        if (imageBit1 != null) {
            stmt.bindBlob(7, imageBit1);
        }
 
        byte[] imageBit2 = entity.getImageBit2();
        if (imageBit2 != null) {
            stmt.bindBlob(8, imageBit2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SportRecord readEntity(Cursor cursor, int offset) {
        SportRecord entity = new SportRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sportName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sportLocation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // imageBit1
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7) // imageBit2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SportRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSportName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSportLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageBit1(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setImageBit2(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SportRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SportRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SportRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sportRecords" to-many relationship of User. */
    public List<SportRecord> _queryUser_SportRecords(Long userId) {
        synchronized (this) {
            if (user_SportRecordsQuery == null) {
                QueryBuilder<SportRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_SportRecordsQuery = queryBuilder.build();
            }
        }
        Query<SportRecord> query = user_SportRecordsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
